<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Exon</title>
    <script src="https://d3js.org/d3.v5.js"></script>
    <link rel="stylesheet" href="css/exon.css">
</head>
<body>    
    <div id="exon">

    </div>
    <script>
        async function readJsonData() {
        
            const fusionData = await d3.json('http://localhost:3000/data/fusion.json')
            const jnuData = await d3.json('http://localhost:3000/data/jnu_hem_r.json')
            // console.log('fusionData', fusionData)
            // console.log('jnuData', jnuData);

            // jnu_hem_r 에서 같은 transcript 중복제거 후 
            // 가장 큰 exon 소팅하여 fusionData에 key: value로 넣어준다
            // target이 없는 경우 예외처리 및 총 액손 수 지정할 수 있도록
            let left_exon = [];
            let right_exon = [];
            
            // fotmatting fusion_cds
            function upperCase(cds_transl) {
                const string = [];
                cds_transl.filter(d => {
                    string.push(d[0]);
                })
                const cds_string = string.join('');
                const index = [];
                cds_string.replace(/[A-Z]/g, (match, i) => {
                    index.push(i)
                })
                let num = Math.floor(index[0]/3)
                cds_transl[num][0].replace(/[a-z]/g, (match) => {
                    cds_transl[num][2] = 'rgb(197, 224, 180)'
                })
                const right = [];
                for (let i = 0; i <= 4; i++) {
                    right.push(cds_transl[num + i])                  
                }
                console.log(right)
                const right_cds_array = [];
                const right_transl_array= [];
                right.filter(d => {
                    right_cds_array.push(d[0])
                    right_transl_array.push(d[1])
                })

                const right_cds_string = right_cds_array.join('');
                const right_transl_string = right_transl_array.join('');

                let split = '';
                right_cds_string.replace(/[a-z]/g, (match, i) => {
                    split = match
                })
                // console.log('split',split)
                right_cds_array.map(d => {
                    if(d.indexOf(split) !== -1) {
                        console.log(d)
                    }
                })
                var split_right_cds_string = right_cds_string.replace(split, '')
                // console.log(split_right_cds_string)

                return {
                    split,
                    split_right_cds_string,
                    right_transl_string
                }
            }
            
            function lowerCase(cds_transl) {
                // const lower = [];
                // let result = string.replace(/[a-z]/g, (upp, i, st) => {
                //     lower.push(upp)
                // })
                // let lowerString = lower.join('')
                // return lowerString.substr(lowerString.length - 15)
                const string = [];
                cds_transl.filter(d => {
                    string.push(d[0]);
                })
                const cds_string = string.join('');
                const index = [];
                cds_string.replace(/[a-z]/g, (match, i) => {
                    index.push(i)
                })
                let num = Math.floor(index.length/3 - 1)
                const left = [];
                for (let i = 4; i >= 0; i--) {
                    left.push(cds_transl[num - i])                  
                }
                const left_cds_array = [];
                const left_transl_array= [];
                left.filter(d => {
                    left_cds_array.push(d[0])
                    left_transl_array.push(d[1])
                })
                const left_cds_string = left_cds_array.join('');
                const left_transl_string = left_transl_array.join('');
                
                return {
                    left_cds_string,
                    left_transl_string
                }
            }
            
            fusionData.forEach(d => {
                const exception = []
                const sample = {
                    exon: 20
                }
                for (let y = 0; y < 20; y++) {
                    exception.push(sample)
                }

                if(jnuData.filter(i => i.transcript === d.cds_left_id).length === 0) {
                    left_exon.push(exception)
                } else {
                    left_exon.push(jnuData.filter(i => i.transcript === d.cds_left_id))
                }
                
                if(jnuData.filter(i => i.transcript === d.cds_right_id).length === 0) {
                    right_exon.push(exception)
                } else {
                    right_exon.push(jnuData.filter(i => i.transcript === d.cds_right_id))
                }

                for (let y = 0; y < left_exon.length; y++ ){
                    const left_filter = left_exon[y]
                    const right_filter = right_exon[y]
                    let t_left_exon = []
                    let t_right_exon = []
                    for (let i = 0; i < left_filter.length; i++) {
                        t_left_exon.push(left_filter[i].exon)
                        if(left_exon) {
                            d['total_source_exon'] = Math.max.apply(null, t_left_exon)
                        }
                    }
                    for (let x = 0; x < right_filter.length; x++) {
                        t_right_exon.push(right_filter[x].exon)
                        if(right_exon) {
                            d['total_target_exon'] = Math.max.apply(null, t_right_exon)
                        }
                    }
                }
            })

            fusionData.map((d) => {
                d['source_id'] = d.leftBreakPoint.split(':')[0];
                d['source_name'] = d.fusionName.split('--')[0];
                d['source_strand'] = d.leftBreakPoint.split(':')[2];
                d['source_exon'] = d.left_tx_exon.split(':')[1].substring(4) + '/' + String(d.total_source_exon);
                // d['source_cds'] = lowerCase(d.fusion_cds).toUpperCase();
                d['target_id'] = d.rightBreakpoint.split(':')[0];
                d['target_name'] = d.fusionName.split('--')[1];
                d['target_strand'] = d.rightBreakpoint.split(':')[2];
                d['target_exon'] = d.right_tx_exon.split(':')[1].substring(4) + '/' + String(d.total_target_exon);
                // d['target_cds'] = upperCase(d.fusion_cds);
                return fusionData;
            });
            // console.log(fusionData)
            const fusion = [];
            fusionData.forEach((d) => {
                if( d.prot_fusion_type === 'INFRAME' && (d.junctionReadCount > 0 && d.spanningFragCount > 0)) {
                    fusion.push(d);
                }
            });

            console.log('fusion', fusion)

            // format(cds, transl)
            fusion.map(d => {
                const cds_transl = [];
                for (let i = 0; i < d.fusion_cds.length / 3; i++) {
                    var cds = [];
                    cds.push(d.fusion_cds.substring(i * 3,  (i + 1) * 3));
                    cds_transl.push(cds);
                }

                const transl = [];
                for (let x = 0; x < d.fusion_transl.length; x++) {
                    transl.push(d.fusion_transl.substring(x, x + 1));
                }

                for (let y = 0; y < cds_transl.length; y++) {
                    cds_transl[y].push(transl[y]);
                }
                // console.log('cds_transl', cds_transl)

                const cdsString = [];
                const translString = [];
                let cdss = cds_transl.filter(d => {
                    cdsString.push(d[0]);
                    translString.push(d[1]);
                })

                let transl_string = lowerCase(cds_transl).left_transl_string + upperCase(cds_transl).right_transl_string
                const transl_array = transl_string.split('')

                d['source_cds'] = lowerCase(cds_transl).left_cds_string.toUpperCase() + upperCase(cds_transl).split.toUpperCase()
                d['target_cds'] = upperCase(cds_transl).split_right_cds_string;
                d['transl'] = transl_array
            })


            for(let i = 0; i < fusion.length; i++) {
                drawExonDiagram(
                    fusion[i].source_name, 
                    fusion[i].cds_left_id, 
                    fusion[i].source_strand, 
                    fusion[i].source_exon, 
                    fusion[i].leftBreakPoint,
                    fusion[i].source_cds,
                    fusion[i].target_name, 
                    fusion[i].cds_right_id, 
                    fusion[i].target_strand, 
                    fusion[i].target_exon,
                    fusion[i].rightBreakpoint,
                    fusion[i].target_cds,
                    fusion[i].transl
                )
            }
            
            function drawExonDiagram (
                left_name, left_transcript, left_strand, left_exon, left_break_point, left_cds, 
                right_name, right_transcript, right_strand, right_exon, right_break_point, right_cds, fusion_transl) {
                // fusion 다이어그램용 데이터
                // leftGene: 왼쪽 유전자
                // rightGene: 오른쪽 유전자
                var data = {
                    leftGene: {
                        name: left_name,
                        transcript: left_transcript,
                        strand: left_strand,
                        exon: left_exon,
                        bp: left_break_point,
                        cds: left_cds
                    },
                    rightGene: {
                        name: right_name,
                        transcript: right_transcript,
                        strand: right_strand,
                        exon: right_exon,
                        bp: right_break_point,
                        cds: right_cds
                    },
                    transl: fusion_transl 
                }

                console.log('dataaaaaaaa', data)
                //최대로 표시할 Exon의 개수
                const maxDisplayExonNum = 4;
                //최대로 표시할 삭제된 Exon의 개수
                const maxDeletedExonNum = 2;
                //왼쪽 유전자의 최대 Exon 개수
                const leftGeneTotalExonNum = +(data.leftGene.exon.split('/')[1]);
                // 왼쪽 유전자의 퓨전이 발생한 Exon 번호 
                const leftGeneTargetExonNum = +(data.leftGene.exon.split('/')[0]);
                // 오른쪽 유전자의 최대 Exon 개수
                const rightGeneTotalExonNum = +(data.rightGene.exon.split('/')[1]);
                // 오른쪽 유전자의 퓨전이 발생한 Exon 번호 
                const rightGeneTargetExonNum = +(data.rightGene.exon.split('/')[0]);
                /*
                * 퓨전 다이어그램에 표시할 엑손 목록을 생성하는 함수
                * geneTotalExonNum: 유전자의 최대 엑손 개수
                * geneTargetExonNum: 유전자의 퓨전 발생 엑손 번호
                * maxDisplayExonNum: 화면에 표시할 엑손의 개수
                * maxDeletedExonListNum: 화면에 표시할 삭제된 엑손의 개수
                * leftOrRight: 퓨젼 유전자의 위치(left OR right)
                * @return {
                    displayExonList: string[], 표시할 엑손 배열
                    deletedExonList: string[] 삭제로 표시할 엑손 배렬}
                */
                function getDisplayExonList(geneTotalExonNum, geneTargetExonNum, maxDisplayExonNum, maxDeletedExonListNum, leftOrRight) {
                    let geneExonList = new Array(geneTotalExonNum).fill(0).map((d, i) => `E${i + 1}`);
                    let displayExonList;
                    let deletedExonList;
                    if (leftOrRight === 'left') {
                        displayExonList = geneExonList.slice(Math.max(0, geneTargetExonNum - maxDisplayExonNum), geneTargetExonNum);
                        deletedExonList = geneExonList.slice(geneTargetExonNum, Math.min(geneTotalExonNum, geneTargetExonNum + maxDeletedExonListNum));
                    } else {
                        displayExonList = geneExonList.slice(geneTargetExonNum - 1, Math.min(geneTotalExonNum, geneTargetExonNum + maxDisplayExonNum) - 1);
                        deletedExonList = geneExonList.slice(Math.max(0, geneTargetExonNum - maxDeletedExonListNum), geneTargetExonNum - 1);                
                    }
                    return {displayExonList: displayExonList, deletedExonList: deletedExonList};
                }
                // 왼쪽 유전자 엑손 목록 생성
                var leftGeneExonListData = getDisplayExonList(leftGeneTotalExonNum, leftGeneTargetExonNum, maxDisplayExonNum, maxDeletedExonNum, 'left');
                // 오른족 유전자 엑손 목록 생성
                var rightGeneExonListData = getDisplayExonList(rightGeneTotalExonNum, rightGeneTargetExonNum, maxDisplayExonNum, maxDeletedExonNum, 'right');
                // console.log(leftGeneExonListData);
                // console.log(rightGeneExonListData);
                
                //텍스트 폰트명
                const fontFamily = 'Courier New';
                // 유전자 라벨 높이
                const geneLabelHeight = 20;
                // 유전자 라벨 폰트 크기
                const geneLabelFontSize = 15;
                // 엑손 박스 넓이
                const exonWidth = 40;
                // 엑손 박스 높이
                const exonHeight = 15;
                // 엑손 박스 간 간격
                const exonMargin = 5;
                // 엑손 박스 테두리 폭
                const exonStrokeWidth = 2;
                // 유전자 사이 간격
                const geneEmptySpaceWidth = 200;
                // 엑손 텍스트 폰트 크기
                const exonFontSize = 10;
                // 엑손 라벨의 왼쪽 마진
                const exonLabelMarginLeft = 5;
                // 엑손 라벨의 상단 마진
                const exonLabelMarginTop = 10;
                // 엑손 목록 위아래 사이 간격
                const fusionGeneLayerEmptySpaceHeight = 80;
                // 왼쪽 유전자 엑손 연결 라인색
                const leftGeneBoxLineColor = 'rgb(46,117,182)';
                // 왼쪽 유전자 엑손 박스 배경색
                const leftGeneBoxBackColor = 'rgb(91,155,213)';
                // 왼쪽 유전자 삭제된 엑손 박스 배경색
                const deletedLeftExonBackColor = 'rgb(189,215,238)';
                // 왼쪽 유전자박스 테두리색
                const leftGeneBoxBorderColor = 'rgb(63,113,156)';
                // 왼쪽 유전자 삭제된 엑손 테두리 색
                const deletedLeftExonBorderColor = 'rgb(157,195,230)';
                // 오른쪽 유전자 엑손 연결 라인 색상
                const rightGeneBoxLineColor = 'rgb(197,90,17)';
                // 오른쪽 유전자 엑손 박스 배경색
                const rightGeneBoxBackColor = 'rgb(237,125,49)';
                // 오른쪽 유전자 삭제된 엑손 박스 배경색
                const deletedRightExonBackColor = 'rgb(248,203,173)';
                // 오른쪽 유전자박스 테두리색
                const rightGeneBoxBorderColor = 'rgb(174,90,33)';
                // 오른쪽 유전자 삭제된 엑손 테두리 색
                const deletedRightExonBorderColor = 'rgb(244,177,131)';
                // 엑손 텍스트 색
                const exonTextColor = 'rgb(255,255,255)';
                // 하단 엑손 목록 왼쪽 마진
                const fusionGeneLeftMargin = geneEmptySpaceWidth / 2;
                // 하단 CDS TranSL 연결선
                const LineColorTranSL = 'rgb(127,127,127)';
                
                var svg = d3.select('div').append('svg').attr('width', '100%').attr('height', '300').style('margin-bottom', '30px')
                //왼쪽 유전자명 라벨
                svg.append('g').append('text')
                    .text(`${data.leftGene.name}:${data.leftGene.transcript}(${data.leftGene.strand})`)
                    .attr('x', '5').attr('y', '15').attr('font-size', `${geneLabelFontSize}`)
                    .attr('font-weight', 'bold')
                    .attr('font-family', fontFamily);
                // 오른쪽 유전자명 라벨
                svg.append('g').append('text')
                    .text(`${data.rightGene.name}:${data.rightGene.transcript}(${data.rightGene.strand})`)
                    .attr('transform', `translate(${exonStrokeWidth + (leftGeneExonListData.displayExonList.length * (exonWidth + exonMargin)) - exonMargin + geneEmptySpaceWidth})`)
                    .attr('x', '5')
                    .attr('y', '15')
                    .attr('font-size', `${geneLabelFontSize}`)
                    .attr('font-weight', 'bold')
                    .attr('font-family', fontFamily);
                // 왼쪽 유전자 엑손 연결 라인 그룹 컨테이너 추가(엑손 박스 중간 높이로 좌표 이동)
                const geneBox1Line = svg.append('g')
                    .attr('transform', `translate(0 ${geneLabelHeight + (exonHeight / 2) + exonStrokeWidth})`)
                geneBox1Line.append('line').attr('stroke', leftGeneBoxLineColor).attr('stroke-width', `${exonStrokeWidth}`)
                    .attr('x1', `${exonStrokeWidth}`).attr('y1', `${exonStrokeWidth}`).attr('x2', `${(exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length - exonMargin}`);
                // 왼쪽 유전자 엑손 박스 표시용 좌표 변환(유전자 라벨 아래로 이동)
                var geneBox1Layer = svg.append('g').attr('transform', `translate(0 ${geneLabelHeight})`)
                    .attr('x', `${exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                    .attr('width', `${leftGeneExonListData.displayExonList.length * (exonWidth + exonMargin)}`).attr('height', `${exonWidth + 5}`);
                // 왼쪽 유전자 엑손 박스 추가
                geneBox1Layer.selectAll('rect').data(leftGeneExonListData.displayExonList).enter().append('rect')
                    .attr('x', (d, i) => `${i * (exonWidth + exonMargin) + exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                    .attr('width', `${exonWidth}`).attr('height', `${exonHeight}`)
                    .style('fill', leftGeneBoxBackColor).style('stroke', leftGeneBoxBorderColor).style('stroke-width', `${exonStrokeWidth}`);
                // 왼쪽 유전자 엑손 텍스트 추가
                geneBox1Layer.selectAll('text').data(leftGeneExonListData.displayExonList).enter().append('text')
                    .text(d => d).attr('font-size', `${exonFontSize}`).attr('fill', exonTextColor)
                    .attr('x', (d, i) => `${exonStrokeWidth + ((exonWidth + exonMargin) * i) + exonLabelMarginLeft}`)
                    .attr('y', `${exonStrokeWidth + exonLabelMarginTop}`)
                    .attr('font-family', fontFamily);
                // 삭제된 엑손 목록을 표시할 수 있을 경우에 표시
                if(leftGeneExonListData.deletedExonList.length > 0) {
                    // 왼쪽 유전자 삭제된 엑손 박스 그룹 컨테이너 추가
                    var deletedExonBoxList1Layer = svg.append('g').attr('transform', `translate(${exonStrokeWidth + (exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length} ${geneLabelHeight})`)
                        .attr('x', `${exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                        .attr('width', `${leftGeneExonListData.displayExonList.length * (exonWidth + exonMargin)}`).attr('height', `${exonWidth + 5}`);
                    // 왼쪽 유전자 삭제된 엑손 박스 추가
                    deletedExonBoxList1Layer.selectAll('rect').data(leftGeneExonListData.deletedExonList).enter().append('rect')
                        .attr('x', (d, i) => `${i * (exonWidth + exonMargin) + exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                        .attr('width', `${exonWidth}`).attr('height', `${exonHeight}`)
                        .style('fill', deletedLeftExonBackColor).style('stroke', deletedLeftExonBorderColor).style('stroke-width', `${exonStrokeWidth}`);
                    // 왼쪽 유전자 삭제된 엑손 텍스트 추가
                    deletedExonBoxList1Layer.selectAll('text').data(leftGeneExonListData.deletedExonList).enter().append('text')
                        .text(d => d).attr('font-size', `${exonFontSize}`).attr('fill', exonTextColor)
                        .attr('x', (d, i) => `${exonStrokeWidth + ((exonWidth + exonMargin) * i) + exonLabelMarginLeft}`)
                        .attr('y', `${exonStrokeWidth + exonLabelMarginTop}`)
                        .attr('font-family', fontFamily);
                }    
                // 오른쪽 유전자 엑손 연결 라인 그룹 컨테이너 추가(엑손 박스 중간 높이로 좌표 이동)
                const geneBox2Line = svg.append('g')
                    .attr('transform', `translate(${((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - exonMargin + geneEmptySpaceWidth + exonStrokeWidth} ${geneLabelHeight + (exonHeight / 2) + exonStrokeWidth})`);
                geneBox2Line.append('line').attr('stroke', rightGeneBoxLineColor).attr('stroke-width', `${exonStrokeWidth}`)
                    .attr('x1', `${exonStrokeWidth}`).attr('y1', `${exonStrokeWidth}`).attr('x2', `${(exonWidth + exonMargin) *
                        rightGeneExonListData.displayExonList.length - exonMargin}`);
                // 오른쪽 유전자 엑손 박스 표시 좌표 이동(유전자 라벨 아래로 이동)
                var geneBox2Layer = svg.append('g')
                    .attr('transform', `translate(${exonStrokeWidth + (leftGeneExonListData.displayExonList.length * (exonWidth + exonMargin)) - exonMargin +
                        geneEmptySpaceWidth} ${geneLabelHeight})`)
                    .attr('x', `${exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                    .attr('width', `${rightGeneExonListData.displayExonList.length * (exonWidth + exonMargin)}`).attr('height', `${exonHeight + exonStrokeWidth}`);
                // 오른쪽 유전자 엑손 박스 추가
                geneBox2Layer.selectAll('rect').data(rightGeneExonListData.displayExonList).enter().append('rect')
                    .attr('x', (d, i) => `${i * (exonWidth + exonMargin) + exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                    .attr('width', `${exonWidth}`).attr('height', `${exonHeight}`)
                    .style('fill', rightGeneBoxBackColor).style('stroke', rightGeneBoxBorderColor).style('stroke-width', `${exonStrokeWidth}`);
                // 오른쪽 유전자 엑손 텍스트 추가
                geneBox2Layer.selectAll('text').data(rightGeneExonListData.displayExonList).enter().append('text')
                    .text(d => d).attr('font-size', `${exonFontSize}`).attr('fill', exonTextColor)
                    .attr('x', (d, i) => `${exonStrokeWidth + ((exonWidth + exonMargin) * i) + exonLabelMarginLeft}`)
                    .attr('y', `${exonStrokeWidth + exonLabelMarginTop}`)
                    .attr('font-family', fontFamily);
                // 오른쪽 유전자 삭제된 엑손 목록이 있을 경우 표시
                if (rightGeneExonListData.deletedExonList.length > 0) {
                    // 유전자의 삭제된 엑속 목록을 표시할 좌표로 이동(오른쪽 유전자 시작 부분에서 삭제된 유전자의 엑손 목록 크기만큼 왼쪽으로 이동)
                    var deletedExonBoxList2Layer = svg.append('g')
                        .attr('transform', `translate(${exonStrokeWidth + ((leftGeneExonListData.displayExonList.length - rightGeneExonListData.deletedExonList.length) * (exonWidth + exonMargin)) - exonMargin +
                            geneEmptySpaceWidth} ${geneLabelHeight})`)
                        .attr('x', `${exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                        .attr('width', `${rightGeneExonListData.deletedExonList.length * (exonWidth + exonMargin)}`).attr('height', `${exonHeight + exonStrokeWidth}`);
                    // 오른쪽 유전자의 삭제된 엑손 목록 표시
                    deletedExonBoxList2Layer.selectAll('rect').data(rightGeneExonListData.deletedExonList).enter().append('rect')
                        .attr('x', (d, i) => `${i * (exonWidth + exonMargin) + exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                        .attr('width', `${exonWidth}`).attr('height', `${exonHeight}`)
                        .style('fill', deletedRightExonBackColor).style('stroke', deletedRightExonBorderColor).style('stroke-width', `${exonStrokeWidth}`);
                    // 오른쪽 유전자의 삭제된 엑손 텍스트 추가
                    deletedExonBoxList2Layer.selectAll('text').data(rightGeneExonListData.deletedExonList).enter().append('text')
                        .text(d => d).attr('font-size', `${exonFontSize}`).attr('fill', exonTextColor)
                        .attr('x', (d, i) => `${exonStrokeWidth + ((exonWidth + exonMargin) * i) + exonLabelMarginLeft}`)
                        .attr('y', `${exonStrokeWidth + exonLabelMarginTop}`)
                        .attr('font-family', fontFamily);    
                }
                // 하단의 왼쪽 유전자 엑손 연결 라인 좌표 이동
                const fusionGeneBox1Line = svg.append('g')
                    .attr('transform', `translate(${fusionGeneLeftMargin} ${geneLabelHeight + exonHeight + fusionGeneLayerEmptySpaceHeight + exonHeight / 2 + exonStrokeWidth })`)
                // 하단의 왼쪽 유전자 엑손 연결 라인 추가
                fusionGeneBox1Line.append('line').attr('stroke', leftGeneBoxLineColor).attr('stroke-width', `${exonStrokeWidth}`)
                    .attr('x1', `${exonStrokeWidth}`).attr('y1', `${exonStrokeWidth}`).attr('x2', `${(exonWidth + exonMargin) *
                        leftGeneExonListData.displayExonList.length - exonMargin}`);
                // 하단의 오른쪽 유전자 엑손 연결 라인 그룹 컨테이너 추가
                const fusionGeneBox2Line = svg.append('g')
                    .attr('transform', `translate(${fusionGeneLeftMargin + ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - exonMargin} ${geneLabelHeight + exonHeight +
                        fusionGeneLayerEmptySpaceHeight + exonHeight / 2 + exonStrokeWidth })`)
                // 하단의 왼쪽 유전자 엑손 연결 라인 추가
                fusionGeneBox2Line.append('line').attr('stroke', rightGeneBoxLineColor).attr('stroke-width', `${exonStrokeWidth}`)
                    .attr('x1', `${exonStrokeWidth}`).attr('y1', `${exonStrokeWidth}`).attr('x2', `${(exonWidth +
                        exonMargin) *
                        rightGeneExonListData.displayExonList.length - exonMargin}`);
                // 하단의 왼쪽 유전자의 엑손 박스를 표시하기 위한 그룹 컨테이너 추가
                const fusionGeneBox1Layer = svg.append('g')
                    .attr('transform', `translate(${fusionGeneLeftMargin} ${geneLabelHeight + exonHeight +
                    fusionGeneLayerEmptySpaceHeight})`)
                    .attr('x', '100').attr('y', `${exonStrokeWidth}`)
                // 하단의 왼쪽 유전자의 엑손 박스 추가
                fusionGeneBox1Layer.selectAll('rect').data(leftGeneExonListData.displayExonList).enter().append('rect')
                    .attr('x', (d, i) => `${i * (exonWidth + exonMargin) + exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                    .attr('width', `${exonWidth}`).attr('height', `${exonHeight}`)
                    .style('fill', leftGeneBoxBackColor).style('stroke', leftGeneBoxBorderColor).style('stroke-width', `${exonStrokeWidth}`);
                // 하단의 오른쪽 유전자의 엑손 박스를 표시하기 위한 그룹 컨테이너 추가
                const fusionGeneBox2Layer = svg.append('g')
                    .attr('transform', `translate(${fusionGeneLeftMargin + (exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length -
                    exonMargin} ${geneLabelHeight + exonHeight + fusionGeneLayerEmptySpaceHeight})`)
                    .attr('x', '100').attr('y', `${exonStrokeWidth}`)
                // 하단의 왼쪽 유전자의 엑손 박스 추가
                fusionGeneBox2Layer.selectAll('rect').data(rightGeneExonListData.displayExonList).enter().append('rect')
                    .attr('x', (d, i) => `${i * (exonWidth + exonMargin) + exonStrokeWidth * 2}`).attr('y', `${exonStrokeWidth}`)
                    .attr('width', `${exonWidth}`).attr('height', `${exonHeight}`)
                    .style('fill', rightGeneBoxBackColor).style('stroke', rightGeneBoxBorderColor).style('stroke-width', `${exonStrokeWidth}`);
                // 하단의 왼쪽 유전자 엑손 텍스트 표시용 그룹 컨테이너 추가
                const fusionGeneText1Layer = svg.append('g')
                    .attr('transform', `translate(${fusionGeneLeftMargin + exonWidth / 5} ${geneLabelHeight + exonHeight +
                    fusionGeneLayerEmptySpaceHeight + exonHeight / 1.2})`)
                fusionGeneText1Layer.selectAll('text').data(leftGeneExonListData.displayExonList).enter().append('text')
                    .text(d => d).attr('font-size', `${exonFontSize}`).attr('fill', exonTextColor)
                    .attr('x', (d, i) => `${exonStrokeWidth + ((exonWidth + exonMargin) * i)}`)
                    .attr('font-family', fontFamily);

                const fusionGeneText2Layer = svg.append('g')
                    .attr('transform', `translate(${fusionGeneLeftMargin + exonWidth / 5 + (exonWidth + exonMargin) *
                        leftGeneExonListData.displayExonList.length - exonMargin} ${geneLabelHeight + exonHeight + fusionGeneLayerEmptySpaceHeight + exonHeight / 1.2})`)
                fusionGeneText2Layer.selectAll('text').data(rightGeneExonListData.displayExonList).enter().append('text')
                    .text(d => d).attr('font-size', `${exonFontSize}`).attr('fill', exonTextColor)
                    .attr('x', (d, i) => `${exonStrokeWidth + ((exonWidth + exonMargin) * i)}`)
                    .attr('font-family', fontFamily);
                // 왼쪽 퓨전 엑손 박스간 연결 라인용 그룹 컨테이너 추가
                const fusionGeneBoxToBox1Line = svg.append('g')
                // 왼쪽 퓨전 엑손 박스간 연결 라인 그리기
                fusionGeneBoxToBox1Line.append('line')
                    .attr('stroke', leftGeneBoxLineColor)
                    .attr('stroke-width', `${exonStrokeWidth}`)
                    .attr('stroke-dasharray', '5')
                    .attr('x1', `${exonStrokeWidth + ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - exonMargin - (exonWidth / 2) + 20}`)
                    .attr('y1', `${geneLabelHeight + exonHeight + (exonStrokeWidth * 2)}`)
                    .attr('x2', `${fusionGeneLeftMargin + ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - exonMargin - (exonWidth / 2) + 22}`)
                    .attr('y2', `${geneLabelHeight + exonHeight + fusionGeneLayerEmptySpaceHeight}`);
                // 오른쪽 퓨전 엑손 박스간 연결 라인용 그룹 컨테이너 추가
                const fusionGeneBoxToBox2Line = svg.append('g')
                // 오른쪽 퓨전 엑손 박스간 연결 라인 그리기
                fusionGeneBoxToBox2Line.append('line')
                    .attr('stroke', rightGeneBoxLineColor)
                    .attr('stroke-width', `${exonStrokeWidth}`)
                    .attr('stroke-dasharray', '5')
                    .attr('x1', `${exonStrokeWidth + ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - exonMargin + geneEmptySpaceWidth + (exonWidth / 2) - 20}`)
                    .attr('y1', `${geneLabelHeight + (exonStrokeWidth * 2) + exonHeight}`)
                    .attr('x2', `${fusionGeneLeftMargin + exonStrokeWidth + ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - exonMargin + (exonWidth / 2) - 18}`)
                    .attr('y2', `${geneLabelHeight + exonHeight + fusionGeneLayerEmptySpaceHeight}`);
                // 퓨전 엑손 박스 중앙 하단 연결선
                const fusionGeneLineForTranSL = svg.append('g')
                fusionGeneLineForTranSL.append('line')
                    .attr('stroke', LineColorTranSL)
                    .attr('stroke-width', `${exonStrokeWidth}`)
                    .attr('x1', fusionGeneLeftMargin + ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - exonStrokeWidth)
                    .attr('y1', 116)
                    .attr('x2', fusionGeneLeftMargin + ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - exonStrokeWidth)
                    .attr('y2', 220)
                // 왼쪽 브레이크 포인트 텍스트 추가
                const LeftBreakPoint = svg.append('g')
                LeftBreakPoint.append('text')
                    .text(`${data.leftGene.bp}`)
                    .attr('x', ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - 20).attr('y', '150').attr('font-size', '12')
                    .attr('font-family', fontFamily);
                // 오른쪽 브레이크 포인트 텍스트 추가
                const RightBreakPoint = svg.append('g')
                LeftBreakPoint.append('text')
                    .text(`${data.rightGene.bp}`)
                    .attr('x', ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) + 105 ).attr('y', '150').attr('font-size', '12')
                    .attr('font-family', fontFamily);
                // 왼쪽 cds 텍스트
                const LeftCds = svg.append('g')
                LeftCds.append('text')
                    .text(`${data.leftGene.cds}`)
                    .attr('x', ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - 20).attr('y', '190').attr('font-size', '12')
                    .attr('font-family', fontFamily);
                // 오른쪽 cds 텍스트
                const RightCds = svg.append('g')
                LeftCds.append('text')
                    .text(`${data.rightGene.cds}`)
                    .attr('x', ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) + 105).attr('y', '190').attr('font-size', '12')
                    .attr('font-family', fontFamily);
                // 하단 transl 텍스트
                const Fusion_TransL = svg.append('g')
                    .attr('transform', 'translate(53.5, 203)')
                    // .attr('x', fusionGeneLeftMargin + ((exonWidth + exonMargin) * leftGeneExonListData.displayExonList.length) - exonStrokeWidth).attr('y', 220)
                    // .attr('width', `${leftGeneExonListData.displayExonList.length * (exonWidth + exonMargin)}`).attr('height', `${exonWidth + 5}`);

                Fusion_TransL.selectAll('rect').data(data.transl).enter().append('rect')
                    .attr('x', (d, i) => `${i * (exonWidth + exonMargin) + exonStrokeWidth}`).attr('y', `${exonStrokeWidth}`)
                    .attr('width', `${exonWidth}`).attr('height', `${exonHeight}`)
                    .style('fill', 'rgb(192, 192, 192)')

                Fusion_TransL.selectAll('text').data(data.transl).enter().append('text')
                    .text(d => d).attr('font-size', `${exonFontSize}`).attr('fill', '#181818')
                    .attr('x', (d, i) => `${exonStrokeWidth + ((exonWidth + exonMargin) * i) + exonLabelMarginLeft + exonLabelMarginTop}`)
                    .attr('y', `${exonStrokeWidth + exonLabelMarginTop + 1}`)
                    .attr('font-family', fontFamily);
            }
        }
        readJsonData()

        
    </script>
</body>
</html>